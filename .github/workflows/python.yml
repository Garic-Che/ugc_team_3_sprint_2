name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install wemake-python-styleguide==1.1.0 flake8-html==0.4.3 mypy==1.15.0 lxml==5.4.0
        mkdir -p flake-report
        chmod 777 flake-report
        mkdir -p mypy-report
        chmod 777 mypy-report

    - name: Type checking with mypy
      continue-on-error: true
      run: |
        mypy \
        auth_service/ \
        etl_service/ \
        kafka_clickhouse_etl/ \
        movies_admin/ \
        theatre_service/ \
        ugc_service/ \
        --show-error-codes --namespace-packages --explicit-package-bases || true

    - name: Upload mypy report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: mypy-report-python-${{ matrix.python-version }}
        path: mypy-report/

    - name: Lint with flake8
      run: |
        flake8 . --format=html --htmldir=flake-report || true

    - name: Upload flake8 report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: flake8-report-python-${{ matrix.python-version }}
        path: flake-report/

    - name: Set up Docker
      uses: docker/setup-buildx-action@v3

    - name: Install Docker Compose
      run: |
        curl -fsSL https://github.com/docker/compose/releases/latest/download/docker-compose-Linux-x86_64 -o /usr/local/bin/docker-compose
        chmod +x /usr/local/bin/docker-compose
        docker-compose --version

    - name: Create .env file
      run: |
        cat << EOF > .env
        SECRET_KEY=${{ secrets.SECRET_KEY }}
        SQL_ENGINE=${{ secrets.SQL_ENGINE }}
        PG_USER=${{ secrets.PG_USER }}
        PG_PASSWORD=${{ secrets.PG_PASSWORD }}
        PG_DB=${{ secrets.PG_DB }}
        SQL_HOST=${{ secrets.SQL_HOST }}
        SQL_PORT=${{ secrets.SQL_PORT }}
        SQL_OPTIONS=${{ secrets.SQL_OPTIONS }}
        DATABASE_TYPE=${{ secrets.DATABASE_TYPE }}
        ES_PROTOCOL=${{ secrets.ES_PROTOCOL }}
        ES_HOST=${{ secrets.ES_HOST }}
        ES_PORT=${{ secrets.ES_PORT }}
        REDIS_HOST=${{ secrets.REDIS_HOST }}
        REDIS_PORT=${{ secrets.REDIS_PORT }}
        TOKEN_REDIS_HOST=${{ secrets.TOKEN_REDIS_HOST }}
        TOKEN_REDIS_PORT=${{ secrets.TOKEN_REDIS_PORT }}
        AUTH_DB_HOST=${{ secrets.AUTH_DB_HOST }}
        AUTH_DB_PORT=${{ secrets.AUTH_DB_PORT }}
        AUTH_DB_USER=${{ secrets.AUTH_DB_USER }}
        AUTH_DB_PASSWORD=${{ secrets.AUTH_DB_PASSWORD }}
        AUTH_DB_DATABASE=${{ secrets.AUTH_DB_DATABASE }}
        AUTH_SECRET_KEY=${{ secrets.AUTH_SECRET_KEY }}
        ACCESS_TOKEN_EXPIRES_IN=${{ secrets.ACCESS_TOKEN_EXPIRES_IN }}
        REFRESH_TOKEN_EXPIRES_IN=${{ secrets.REFRESH_TOKEN_EXPIRES_IN }}
        NGINX_HOST=${{ secrets.NGINX_HOST }}
        NGINX_PORT=${{ secrets.NGINX_PORT }}
        DJANGO_ADMIN_HOST=${{ secrets.DJANGO_ADMIN_HOST }}
        DJANGO_ADMIN_PORT=${{ secrets.DJANGO_ADMIN_PORT }}
        DJANGO_STATIC_PATH=${{ secrets.DJANGO_STATIC_PATH }}
        THEATRE_SERVICE_HOST=${{ secrets.THEATRE_SERVICE_HOST }}
        THEATRE_SERVICE_PORT=${{ secrets.THEATRE_SERVICE_PORT }}
        AUTH_SERVICE_HOST=${{ secrets.AUTH_SERVICE_HOST }}
        AUTH_SERVICE_PORT=${{ secrets.AUTH_SERVICE_PORT }}
        DJANGO_SUPERUSER_USERNAME=${{ secrets.DJANGO_SUPERUSER_USERNAME }}
        DJANGO_SUPERUSER_PASSWORD=${{ secrets.DJANGO_SUPERUSER_PASSWORD }}
        GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
        GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
        VK_CLIENT_ID=${{ secrets.VK_CLIENT_ID }}
        VK_CLIENT_SECRET=${{ secrets.VK_CLIENT_SECRET }}
        YANDEX_CLIENT_ID=${{ secrets.YANDEX_CLIENT_ID }}
        YANDEX_CLIENT_SECRET=${{ secrets.YANDEX_CLIENT_SECRET }}
        LIMITER_REDIS_HOST=${{ secrets.LIMITER_REDIS_HOST }}
        LIMITER_REDIS_PORT=${{ secrets.LIMITER_REDIS_PORT }}
        LIMITER_PERIOD_IN_SEC=${{ secrets.LIMITER_PERIOD_IN_SEC }}
        LIMITER_REQUESTS_PER_PERIOD=${{ secrets.LIMITER_REQUESTS_PER_PERIOD }}
        KAFKA_PARTITION_NUMBER=${{ secrets.KAFKA_PARTITION_NUMBER }}
        KAFKA_REPLICATION_FACTOR=${{ secrets.KAFKA_REPLICATION_FACTOR }}
        KAFKA_BOOTSTRAP_SERVER=${{ secrets.KAFKA_BOOTSTRAP_SERVER }}
        KAFKA_INSYNC_REPLICAS_NUMBER=${{ secrets.KAFKA_INSYNC_REPLICAS_NUMBER }}
        KAFKA_MESSAGE_TTL_IN_MS=${{ secrets.KAFKA_MESSAGE_TTL_IN_MS }}
        KAFKA_TOPIC_NAME=${{ secrets.KAFKA_TOPIC_NAME }}
        CLICKHOUSE_NODES=${{ secrets.CLICKHOUSE_NODES }}
        UGC_SERVICE_HOST=${{ secrets.UGC_SERVICE_HOST }}
        UGC_SERVICE_PORT=${{ secrets.UGC_SERVICE_PORT }}
        UGC_API_SECRET_KEY=${{ secrets.UGC_API_SECRET_KEY }}
        UGC_LIMITER_REDIS_HOST=${{ secrets.UGC_LIMITER_REDIS_HOST }}
        UGC_LIMITER_REDIS_PORT=${{ secrets.UGC_LIMITER_REDIS_PORT }}
        SENTRY_DSN=${{ secrets.SENTRY_DSN }}
        ETL_MEMORY_THRESHOLD_MB=${{ secrets.ETL_MEMORY_THRESHOLD_MB }}
        EOF

    ### Кажется, мощности github не справляются с тестами
    # - name: Start services and run tests for auth_service
    #   run: |
    #     cp .env auth_service/tests/functional/
    #     docker-compose --env-file auth_service/tests/functional/.env -f auth_service/tests/functional/docker-compose.yml up --build --exit-code-from tests
    #     # --exit-code-from tests: завершит workflow с кодом возврата контейнера tests

    # - name: Show logs
    #   if: always()
    #   run: docker-compose --env-file auth_service/tests/functional/.env -f auth_service/tests/functional/docker-compose.yml logs tests

    # - name: Stop services
    #   if: always()
    #   run: docker-compose --env-file auth_service/tests/functional/.env -f auth_service/tests/functional/docker-compose.yml down -v

    # - name: Start services and run tests for theatre_service
    #   run: |
    #     docker-compose --env-file .env -f theatre_service/tests/functional/docker-compose.yml up --build --exit-code-from tests
    #     # --exit-code-from tests: завершит workflow с кодом возврата контейнера tests

    # - name: Show logs
    #   if: always()
    #   run: docker-compose --env-file .env -f theatre_service/tests/functional/docker-compose.yml logs tests

    # - name: Stop services
    #   if: always()
    #   run: docker-compose --env-file .env -f theatre_service/tests/functional/docker-compose.yml down -v

    # - name: Run tests kafka_clickhouse_etl
    #   run: |
    #     pytest kafka_clickhouse_etl/tests || true

    - name: Send Telegram notification
      if: always()
      uses: appleboy/telegram-action@v1.0.1
      with:
        to: ${{ secrets.TELEGRAM_CHAT_ID }}
        token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        message: |
          Новый коммит: ${{ github.event.commits[0].message }}

          Python ${{ matrix.python-version }}: ${{ job.status == 'success' && '✅' || '❌' }}

  deploy-reports:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Download all reports
      uses: actions/download-artifact@v4
      with:
        path: reports

    - name: Prepare reports directory
      run: |
        mkdir -p reports/all
        for version in 3.10 3.11 3.12; do
          mkdir -p reports/all/python-$version/mypy
          mkdir -p reports/all/python-$version/flake8
          cp -r reports/mypy-report-python-$version/* reports/all/python-$version/mypy/
          cp -r reports/flake8-report-python-$version/* reports/all/python-$version/flake8/
        done

    - name: Deploy reports to GitHub Pages
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GH_PAT }}
        publish_dir: reports/all
        publish_branch: gh-pages
        force_orphan: true
        commit_message: "Update reports"

    - name: Send Telegram notification
      if: always()
      uses: appleboy/telegram-action@v1.0.1
      with:
        to: ${{ secrets.TELEGRAM_CHAT_ID }}
        token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        message: |
          ${{ github.event_name == 'pull_request' && format('Новый пул-реквест #{0} от {1}: {2}', github.event.pull_request.number, github.actor, github.event.pull_request.title) || format('{0} опубликовал новый коммит: {1}', github.actor, github.event.commits[0].message) }}

          ${{ github.event_name == 'pull_request' && format('Смотреть изменения: https://github.com/{1}/pull/{2}', github.repository, github.event.pull_request.number) || format('Смотреть изменения: https://github.com/{1}/commit/{2}', github.repository, github.sha)}}

          ${{ needs.build.result == 'success' && '✅ Все тесты пройдены успешно:' || '❌ В процессе выполнения возникли ошибки:' }}

          Python 3.10:
          - Отчёт по линтерам: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/python-3.10/flake8/index.html
          - Отчёт по проверке типов: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/python-3.10/mypy/index.html

          Python 3.11:
          - Отчёт по линтерам: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/python-3.11/flake8/index.html
          - Отчёт по проверке типов: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/python-3.11/mypy/index.html

          Python 3.12:
          - Отчёт по линтерам: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/python-3.12/flake8/index.html
          - Отчёт по проверке типов: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/python-3.12/mypy/index.html
