"""initial

Revision ID: b204cda77077
Revises: 
Create Date: 2025-03-27 06:03:13.482924

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'b204cda77077'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    op.execute("CREATE SCHEMA IF NOT EXISTS content;")
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('privilege',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('modified', sa.DateTime(), nullable=True),
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('created', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name'),
    schema='content'
    )
    op.create_table('role',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('modified', sa.DateTime(), nullable=True),
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('created', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name'),
    schema='content'
    )
    op.create_table('user',
    sa.Column('login', sa.String(length=255), nullable=False),
    sa.Column('password', sa.String(length=255), nullable=False),
    sa.Column('modified', sa.DateTime(), nullable=True),
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('created', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('login'),
    schema='content'
    )
    op.execute("CREATE EXTENSION IF NOT EXISTS pg_partman;")
    op.create_table('history',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('user_id', sa.String(), nullable=True),
    sa.Column('user_agent', sa.String(), nullable=False),
    sa.Column('entered', sa.DateTime(), nullable=False),
    sa.Column('user_device_type', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['content.user.id'], ),
    sa.PrimaryKeyConstraint('id', 'entered'),
    schema='content',
    postgresql_partition_by='RANGE (entered)'
    )
    op.execute("""SELECT create_parent(
                p_parent_table := 'content.history',
                p_control := 'entered',
                p_type := 'range',
                p_interval := '1 month',
                p_premake := 4,
                p_automatic_maintenance := 'on'
            );""")
    op.create_table('refresh_token',
    sa.Column('user_id', sa.String(), nullable=False),
    sa.Column('token', sa.String(), nullable=False),
    sa.Column('expired', sa.DateTime(), nullable=False),
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('created', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['content.user.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='content'
    )
    op.create_table('role_privilege',
    sa.Column('role_id', sa.String(), nullable=True),
    sa.Column('privilege_id', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['privilege_id'], ['content.privilege.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['role_id'], ['content.role.id'], ondelete='CASCADE'),
    schema='content'
    )
    op.create_table('user_role',
    sa.Column('user_id', sa.String(), nullable=True),
    sa.Column('role_id', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['role_id'], ['content.role.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['content.user.id'], ondelete='CASCADE'),
    schema='content'
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('user_role', schema='content')
    op.drop_table('role_privilege', schema='content')
    op.drop_table('refresh_token', schema='content')
    op.drop_table('history', schema='content')
    op.drop_table('user', schema='content')
    op.drop_table('role', schema='content')
    op.drop_table('privilege', schema='content')
    # ### end Alembic commands ###
