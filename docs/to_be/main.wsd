@startuml Текущая архитектура
skinparam componentStyle uml2
actor Клиент as Client
component "FrontEnd" as FrontEnd
rectangle "Nginx" {
    component "<<Admin-Panel>>\n""Django""" as AdminPanel
    component "<<ETL-Service>>" as ETLService
    rectangle "Api v1" as ApiV1 {
        component "<<Theatre-api>>\n""Fastapi""" as TheatreApi
        component "<<Auth-api>>\n""Fastapi""" as AuthApi
    }
    database "<<Search-Service>>\n""ElasticSearch""" as SearchService
    database "<<Cache-DB>>\n""Redis""" as CacheDB
    database "<<Theatre-DB>>\n""Postgres""" as TheatreDB
    database "<<Auth-DB>>\n""Postgres""" as AuthDB
    database "<<Limiter-DB>>\nRedis" as LimiterDB
    component "<<UGC-api>>\n""Flask""\nЭндпоинт: events" as UGCApi
    database "<<OLTP-UGC-DB>>\n""Kafka""" as OLTP_UGC_DB
    database "<<OLAP-UGC-DB>>\n""ClickHouse""" as OLAP_UGC_DB
    component "<<UGC-ETL-Service>>\nПарсинг сообщения,\nвалидация и запись" as UGC_ETL
}

Client -down-> AdminPanel: Вход в админку
Client -down-> TheatreApi: Запрос кино-данных
Client -down-> AuthApi: Аутентификация
Client -> FrontEnd: Работа с сайтом
FrontEnd -down-> UGCApi: Передача пользовательских действий
TheatreApi -down-> SearchService: Получение\nданных
TheatreApi -down-> CacheDB
AdminPanel -down-> TheatreDB: Редактирование\nкино-данных
AuthApi -down-> AuthDB
AuthApi -down-> LimiterDB
TheatreDB -down-> ETLService
ETLService -up-> SearchService
UGCApi -down-> OLTP_UGC_DB: Запись в топик\nevents
OLTP_UGC_DB -down-> UGC_ETL
UGC_ETL -right-> OLAP_UGC_DB: Колонка для каждого\nтипа события
@enduml