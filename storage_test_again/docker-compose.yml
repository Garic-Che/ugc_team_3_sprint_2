services:
  postgres:
    image: postgres:16
    env_file: .env
    networks:
      - app-network
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres_init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  mongo:
    deploy:
        resources:
          limits:
            cpus: '2'
            memory: 2G
    image: mongo:6
    command: ["--wiredTigerCacheSizeGB=1", "--bind_ip_all"]
    env_file: .env
    networks:
      - app-network
    volumes:
      - mongo_data:/data/db
      - ./mongo_init.js:/docker-entrypoint-initdb.d/init.js
    ports:
      - "${MONGO_PORT}:${MONGO_PORT}"
    healthcheck:
      test: >
        mongosh -u $$MONGO_INITDB_ROOT_USERNAME -p $$MONGO_INITDB_ROOT_PASSWORD
        --eval "db.adminCommand('ping')"
      interval: 10s
      timeout: 20s
      retries: 15

  tester:
    build: .
    env_file: .env
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy
      mongo:
        condition: service_healthy

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  mongo_data: